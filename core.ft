: >rcx
    X 0x48 X 0x8b X 0x0b        ( MOV RCX, [RBX] )
    X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
;

: >rdx
    X 0x48 X 0x8b X 0x13        ( MOV RDX, [RBX] )
    X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
;
: >r8
    X 0x4c X 0x8b X 0x03        ( MOV R8, [RBX] )
    X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
;
: >r9
    X 0x4c X 0x8b X 0x0b        ( MOV R9, [RBX] )
    X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
;
: rax>
    X 0x48 X 0x83 X 0xeb X 0x08 ( SUB RBX, 8 )
    X 0x48 X 0x89 X 0x03        ( MOV [RBX], RAX )
;

: sp@
    X 0x48 X 0x89 X 0x5b X 0xf8 ( MOV [RBX-8], RBX )
    X 0x48 X 0x83 X 0xeb X 0x08 ( SUB RBX, 8 )
;
: + ( n1 n2 -- n1+n2 )
    X 0x48 X 0x8b X 0x03        ( MOV RAX, [RBX] )
    X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
    X 0x48 X 0x01 X 0x03        ( ADD [rbx], rax )
;
: - ( n1 n0 -- n1-n0 )
    X 0x48 X 0x8b X 0x03        ( mov    rax,QWORD PTR [rbx] )
    X 0x48 X 0x83 X 0xc3 X 0x08 ( add    rbx,0x8 )
    X 0x48 X 0x29 X 0x03        ( sub    [rbx], rax )
;
: pick ( xn ... x1 x0 -- xn ... x1 x0 xn )
    X 0x48 X 0x8b X 0x03         ( mov    rax,QWORD PTR [rbx] )
    X 0x48 X 0x83 X 0xc3 X 0x08  ( add    rbx,0x8 )
    X 0x48 X 0x8b X 0x04 X 0xc3  ( mov    rax,QWORD PTR [rbx+rax*8] )
    X 0x48 X 0x83 X 0xeb X 0x08  ( sub    rbx,0x8 ) 
    X 0x48 X 0x89 X 0x03         ( mov    QWORD PTR [rbx],rax )
;
: dup ( n -- n n )
    0 pick
;
: over ( n1 n0 -- n1 n0 n1 )
    1 pick
;
: drop ( n -- )
    X 0x48 X 0x83 X 0xeb X 0x08
;
: swap ( n1 n0 -- n0 n1 )
    X 0x48 X 0x8b X 0x03        ( mov    rax,QWORD PTR [rbx] )
    X 0x48 X 0x8b X 0x4b X 0x08 ( mov    rcx,QWORD PTR [rbx+0x8] )
    X 0x48 X 0x89 X 0x0b        ( mov    QWORD PTR [rbx],rcx )
    X 0x48 X 0x89 X 0x43 X 0x08 ( mov    QWORD PTR [rbx+0x8],rax )
;
: ! ( n addr -- )
    X 0x48 X 0x8b X 0x03        ( MOV RAX, [RBX]   )
    X 0x48 X 0x8b X 0x53 X 0x08 ( MOV RDX, [RBX+8] )
    X 0x48 X 0x89 X 0x10        ( MOV [RAX], RDX   )
    X 0x48 X 0x83 X 0xc3 X 0x10 ( ADD RBX, 16      )
;

: @ ( addr -- n )
    X 0x48 X 0x8b X 0x03 ( MOV RAX, [RBX] )
    X 0x48 X 0x8b X 0x00 ( MOV RAX, [RAX] )
    X 0x48 X 0x89 X 0x03 ( MOV [RBX], RAX )
;
: c@
    X 0x48 X 0x8b X 0x03        ( mov    rax,QWORD PTR [rbx] ) 
    X 0x48 X 0x0f X 0xb6 X 0x00 ( movzx  rax,BYTE PTR [rax] )
    X 0x48 X 0x89 X 0x03        ( mov    QWORD PTR [rbx],rax )
;
: c!
    X 0x48 X 0x8b X 0x03           ( mov    rax,QWORD PTR [rbx] )
    X 0x48 X 0x8b X 0x53 X 0x08    ( mov    rdx,QWORD PTR [rbx+0x8] )
    X 0x88 X 0x10                  ( mov    BYTE PTR [rax],dl )
    X 0x48 X 0x83 X 0xc3 X 0x10    ( add    rbx,0x10 )
;
: d!
    X 0x48 X 0x8b X 0x03           ( mov    rax,QWORD PTR [rbx] )
    X 0x48 X 0x8b X 0x53 X 0x08    ( mov    rdx,QWORD PTR [rbx+0x8] )
    X 0x89 X 0x10                  ( mov    BYTE PTR [rax], edx )
    X 0x48 X 0x83 X 0xc3 X 0x10    ( add    rbx,0x10 )
;
: ftmain 0x3a8 base+ ;
: state  0x3b0 base+ ;
: fin    0x3b8 base+ ;
: token  0x3c0 base+ ;
: mrd1   0x3e0 base+ ;
: mrd2   0x3e8 base+ ;
: ep     0x3f0 base+ ;
: word-size ( word -- size )
    8 - @
;
: word-head ( word -- word-head )
  dup word-size -
;

: word-name ( word -- name )
  word-head
;

: word-body ( word -- execution-token )
  word-head 40 +
;

: word-immediate ( word -- flag )
  word-head 32 + @
;
: immediate ( -- )
    1 mrd2 @ word-head 32 + !
;
: B ( byte -- )
    ep @ c!
    ep @ 1 + ep !
;
: D ( dword -- )
    ep @ d!
    ep @ 4 + ep !
;
: Q ( qword -- )
    ep @ !
    ep @ 8 + ep !
;
: exit
    0xc3 B ( RET )
; immediate

: if ( -- next-of-if )
    0x48 B 0x8b B 0x03 B        ( MOV  RAX, [RBX] )
    0x48 B 0x83 B 0xc3 B 0x08 B ( ADD  RBX, 8     )
    0x48 B 0x85 B 0xc0 B        ( TEST RAX, RAX   )
    0x0f B 0x84 B 0x00000000 D  ( JZ REL32        )
    ep @
; immediate

: then ( next-of-jx -- )
    ep @ over ( next-of-jx then-addr next-of-jx )
    -         ( next-of-jx rel32-value )
    swap 4 -  ( rel32-value real32-addr )
    d!
; immediate

: else ( next-of-if -- next-of-else )
    0xe9 B 0x00000000 D ( JMP REL32 )
    dup 4 -             ( next-of-if    rel32-addr-of-if )
    swap                ( rel32-addr-of-if next-of-if )
    ep @ swap -         ( rel32-addr-of-if rel32-value-of-if )
    swap d!             (  )
    ep @                ( next-of-else )
; immediate

: true -1 ;
: false 0 ;
: . >rcx print-rcx-as-int ;
: %s >rcx print-rcx-as-cstr ;

